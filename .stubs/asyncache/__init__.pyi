"""
This type stub file was generated by pyright.
"""

import functools
import inspect

from cachetools import Cache, keys

"""
Helpers to use [cachetools](https://github.com/tkem/cachetools) with
asyncio.
"""
__all__ = ["cached"]

class nullcontext:
    """A class for noop context managers."""

    def __enter__(self):  # -> Self@nullcontext:
        """Return ``self`` upon entering the runtime context."""
        ...
    def __exit__(self, exc_type, exc_value, traceback):  # -> None:
        """Raise any exception triggered within the runtime context."""
        ...
    async def __aenter__(self):  # -> Self@nullcontext:
        """Return ``self`` upon entering the runtime context."""
        ...
    async def __aexit__(self, exc_type, exc_value, traceback):  # -> None:
        """Raise any exception triggered within the runtime context."""
        ...

def cached(cache: Cache, key=..., lock=...):
    """
    Decorator to wrap a function or a coroutine with a memoizing callable
    that saves results in a cache.

    When ``lock`` is provided for a standard function, it's expected to
    implement ``__enter__`` and ``__exit__`` that will be used to lock
    the cache when gets updated. If it wraps a coroutine, ``lock``
    must implement ``__aenter__`` and ``__aexit__``.
    """
    ...
