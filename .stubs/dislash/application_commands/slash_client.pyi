"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List

from ..interactions import ApplicationCommand, ApplicationCommandPermissions

__all__ = ("InteractionClient", "SlashClient")

class InteractionClient:
    """
    The main purpose of this class is to track ``INTERACTION_CREATE`` API event.

    Parameters
    ----------
    client : :class:`commands.Bot` | :class:`commands.AutoShardedBot`
        The discord.py Bot instance
    show_warnings : :class:`bool`
        Whether to show the warnings or not. Defaults to ``True``
    modify_send : :class:`bool`
        Whether to modify :class:`Messageable.send` and :class:`Message.edit`.
        Modified methods allow to specify the ``components`` parameter.

    Attributes
    ----------
    client : :class:`commands.Bot` | :class:`commands.AutoShardedBot`
        an instance of any class inherited from :class:`discord.Client`
    application_id : :class:`int`
        the ID of the application your bot is related to
    global_commands : List[:class:`ApplicationCommand`]
        All registered global application commands
    slash_commands : :class:`Dict[str, CommandParent]`
        All invokable slash commands from your code
    user_commands : :class:`Dict[str, InvokableUserCommand]`
        All invokable user commands from your code
    message_commands : :class:`Dict[str, InvokableMessageCommand]`
        All invokable message commands from your code
    commands : :class:`Dict[str, InvokableApplicationCommand]`
        All invokable application commands from your code
    is_ready : bool
        Equals to ``True`` if SlashClient is ready, otherwise it's ``False``
    """

    def __init__(
        self,
        client,
        *,
        test_guilds: List[int] = ...,
        sync_commands: bool = ...,
        show_warnings: bool = ...,
        modify_send: bool = ...,
    ) -> None: ...
    def teardown(self):  # -> None:
        """Cleanup the client by removing all registered listeners and caches."""
        ...
    @property
    def slash_commands(self): ...
    @property
    def user_commands(self): ...
    @property
    def message_commands(self): ...
    @property
    def commands(self): ...
    @property
    def global_commands(self): ...
    def event(self, func):
        """
        Decorator
        ::

            @slash.event
            async def on_ready():
                print("SlashClient is ready")

        | All possible events:
        | ``on_ready``, ``on_auto_register``,
        | ``on_slash_command``, ``on_slash_command_error``
        """
        ...
    def slash_command(self, *args, **kwargs):  # -> (func: Unknown) -> CommandParent:
        """
        A decorator that allows to build a slash command.

        Parameters
        ----------
        auto_sync : :class:`bool`
            whether to automatically register the command or not. Defaults to ``True``
        name : :class:`str`
            name of the slash command you want to respond to (equals to function name by default).
        description : :class:`str`
            the description of the slash command. It will be visible in Discord.
        options : :class:`List[Option]`
            the list of slash command options. The options will be visible in Discord.
        default_permission : :class:`bool`
            whether the command is enabled by default when the app is added to a guild.
        guild_ids : :class:`List[int]`
            if specified, the client will register a command in these guilds.
            Otherwise this command will be registered globally.
        connectors : :class:`dict`
            which function param states for each option. If the name
            of an option already matches the corresponding function param,
            you don't have to specify the connectors. Connectors template:
            ``{"option-name": "param_name", ...}``
        """
        ...
    def user_command(self, *args, **kwargs): ...
    def message_command(self, *args, **kwargs): ...
    def get_global_command(
        self, command_id: int
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Get a cached global command

        Parameters
        ----------

        command_id : int
            the ID of the command

        Returns
        -------

        slash_command : SlashCommand | None
        """
        ...
    def get_global_command_named(
        self, name: str
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Get a cached global command matching the specified name

        Parameters
        ----------

        name : str
            the name of the command

        Returns
        -------

        slash_command : SlashCommand | None
        """
        ...
    def get_guild_command(self, guild_id: int, command_id: int):  # -> None:
        """
        Get a cached guild command

        Parameters
        ----------

        guild_id : int
            the ID of the guild

        command_id : int
            the ID of the command

        Returns
        -------

        slash_command : SlashCommand | None
        """
        ...
    def get_guild_command_named(self, guild_id: int, name: str):  # -> None:
        """
        Get a cached guild command matching the specified name

        Parameters
        ----------

        guild_id : int
            the ID of the guild

        name : str
            the name of the command

        Returns
        -------

        slash_command : SlashCommand | None
        """
        ...
    def get_guild_commands(self, guild_id: int):  # -> list[Unknown | Any]:
        """
        Get cached guild commands

        Parameters
        ----------
        guild_id : int
            the ID of the guild

        Returns
        -------
        ~:class:`List[ApplicationCommand]`
        """
        ...
    async def fetch_global_commands(
        self,
    ):  # -> list[SlashCommand | UserCommand | MessageCommand | None]:
        """
        Requests a list of global registered commands from the API

        Returns
        -------

        global_commands : List[ApplicationCommand]
        """
        ...
    async def fetch_guild_commands(
        self, guild_id: int
    ):  # -> list[SlashCommand | UserCommand | MessageCommand | None]:
        """
        Requests a list of registered commands for a specific guild

        Parameters
        ----------

        guild_id : int

        Returns
        -------

        guild_commands : List[ApplicationCommand]
        """
        ...
    async def fetch_global_command(
        self, command_id: int
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Requests a registered global command

        Parameters
        ----------

        command_id : int

        Returns
        -------

        global_command : ApplicationCommand
        """
        ...
    async def fetch_guild_command(
        self, guild_id: int, command_id: int
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Requests a registered guild command

        Parameters
        ----------

        guild_id : int

        command_id : int

        Returns
        -------

        guild_command : ApplicationCommand
        """
        ...
    async def register_global_command(
        self, app_command: ApplicationCommand
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Registers a global application command

        Parameters
        ----------

        app_command : ApplicationCommand
        """
        ...
    async def register_guild_command(
        self, guild_id: int, app_command: ApplicationCommand
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Registers a local application command

        Parameters
        ----------

        guild_id : :class:`int`

        app_command : :class:`ApplicationCommand`
        """
        ...
    async def overwrite_global_commands(
        self, app_commands: list
    ):  # -> list[SlashCommand | UserCommand | MessageCommand | None]:
        """
        Bulk overwrites all global application commands

        Parameters
        ----------

        app_commands : List[ApplicationCommand]
        """
        ...
    async def overwrite_guild_commands(self, guild_id: int, app_commands: list):  # -> None:
        """
        Bulk overwrites all guild application commands

        Parameters
        ----------

        guild_id : int

        app_commands : List[ApplicationCommand]
        """
        ...
    async def edit_global_command(
        self, command_id: int, app_command: ApplicationCommand, **kwargs
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Edits a global application command

        Parameters
        ----------
        command_id : int
        app_command : ApplicationCommand
            replacement of the old data
        """
        ...
    async def edit_guild_command(
        self, guild_id: int, command_id: int, app_command: ApplicationCommand, **kwargs
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Edits the local application command

        Parameters
        ----------
        guild_id : int
        command_id : int
        app_command : ApplicationCommand
            replacement of the old data
        """
        ...
    async def delete_global_command(self, command_id: int):  # -> None:
        """
        Deletes the global application command

        Parameters
        ----------
        command_id : int
        """
        ...
    async def delete_guild_command(self, guild_id: int, command_id: int):  # -> None:
        """
        Deletes the local application command

        Parameters
        ----------
        guild_id : int
        command_id : int
        """
        ...
    async def delete_global_commands(self):  # -> None:
        """
        Deletes all global commands.
        """
        ...
    async def delete_guild_commands(self, guild_id: int):  # -> None:
        """
        Deletes all local commands in the specified guild.

        Parameters
        ----------
        guild_id : int
            the ID of the guild where you're going to delete the commands
        """
        ...
    async def fetch_guild_command_permissions(
        self, guild_id: int, command_id: int
    ):  # -> SlashCommandPermissions:
        """
        Fetches command permissions for a specific command in a guild.

        Parameters
        ----------
        guild_id : :class:`int`
            the ID of the guild
        command_id : :class:`int`
            the ID of the command
        """
        ...
    async def batch_fetch_guild_command_permissions(
        self, guild_id: int
    ):  # -> dict[int, SlashCommandPermissions]:
        """
        Fetches command permissions for all commands in a guild.

        Parameters
        ----------
        guild_id : :class:`int`
            the ID of the guild
        """
        ...
    async def edit_guild_command_permissions(
        self, guild_id: int, command_id: int, permissions: ApplicationCommandPermissions
    ):  # -> None:
        """
        Edits command permissions for a specific command in a guild.

        Parameters
        ----------
        guild_id : :class:`int`
            the ID of the guild
        command_id : :class:`int`
            the ID of the command
        permissions : :class:`SlashCommandPermissions` | :class:`dict`
            new permissions to set. If you use :class:`SlashCommandPermissions.from_pairs`,
            you can pass the arg of that method straight into this function
        """
        ...
    async def batch_edit_guild_command_permissions(
        self, guild_id: int, permissions: dict
    ):  # -> None:
        """
        Batch edits permissions for all commands in a guild.

        Parameters
        ----------
        guild_id : :class:`int`
            the ID of the guild
        permissions : Dict[:class:`int`, :class:`ApplicationCommandPermissions`]
            a dictionary of command IDs and permissions
        """
        ...
    async def fetch_global_command_named(
        self, name: str
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Fetches a global command that matches the specified name

        Parameters
        ----------

        name : str
            the name of the command to fetch
        """
        ...
    async def fetch_guild_command_named(
        self, guild_id: int, name: str
    ):  # -> SlashCommand | UserCommand | MessageCommand | None:
        """
        Fetches a guild command that matches the specified name

        Parameters
        ----------

        guild_id : int
            ID of the guild where the command is registered

        name : str
            the name of the command to fetch
        """
        ...
    async def edit_global_command_named(
        self, name: str, app_command: ApplicationCommand
    ):  # -> None:
        """
        Edits a global command matching the specified name.

        Parameters
        ----------
        name : str
            the name of the command to edit
        app_command : ApplicationCommand
            replacement of the old data
        """
        ...
    async def edit_guild_command_named(
        self, guild_id: int, name: str, app_command: ApplicationCommand
    ):  # -> None:
        """
        Edits a local command matching the specified name.

        Parameters
        ----------
        guild_id : int
            ID of the guild where the command is registered
        name : str
            the name of the command to edit
        app_command : ApplicationCommand
            replacement of the old data
        """
        ...
    async def delete_global_command_named(self, name: str):  # -> None:
        """
        Deletes a global command matching the specified name.

        Parameters
        ----------
        name : str
            the name of the command to delete
        """
        ...
    async def delete_guild_command_named(self, guild_id: int, name: str):  # -> None:
        """
        Deletes a local command matching the specified name.

        Parameters
        ----------
        guild_id : int
            ID of the guild where the command is registered
        name : str
            the name of the command to edit
        """
        ...
    def dispatch(self, event_name, *args, **kwargs): ...
    async def wait_for_button_click(self, check=..., timeout=...): ...
    async def wait_for_dropdown(self, check=..., timeout=...): ...
    async def multiple_wait_for(
        self, events_and_checks: Dict[str, Any], timeout: float = ...
    ):  # -> None:
        """
        Waits until one of the given events toggles and matches the relevant check.

        Example:

        ::

            result = None
            try:
                result = await client.multiple_wait_for(
                    {
                        "message": lambda msg: msg.author == ctx.author,
                        "reaction_add": lambda react, user: user == ctx.author
                    },
                    timeout=60
                )
            except asyncio.TimeoutError:
                await ctx.send("It took too long")
            if isinstance(result, discord.Message):
                # on_message was toggled
                await ctx.send(f"You said '{result.content}'")
            else:
                # on_reaction_add was toggled
                reaction, user = result
                await ctx.send(f"Your reaction: {reaction.emoji}")

        Parameters
        ----------
        events_and_checks : Dict[:class:`str`, :class:`function | None`]
            a dictionary of event names and relevant checks, e.g.
            ``{"message": lambda m: m.author == ctx.author, "button_click": None}``
        timeout : :class:`float` | :class:`None`
            the amount of seconds the bot should wait for any of the given events
        """
        ...
    command = ...

SlashClient = InteractionClient
