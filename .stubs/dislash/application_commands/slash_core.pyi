"""
This type stub file was generated by pyright.
"""

from .core import InvokableApplicationCommand

__all__ = ("SubCommand", "SubCommandGroup", "CommandParent", "slash_command", "command")

class BaseSlashCommand(InvokableApplicationCommand):
    def __init__(self, func, *, name=..., connectors=..., **kwargs) -> None: ...

class SubCommand(BaseSlashCommand):
    def __init__(
        self, func, *, name=..., description=..., options=..., connectors=..., **kwargs
    ) -> None: ...

class SubCommandGroup(BaseSlashCommand):
    def __init__(self, func, *, name=..., **kwargs) -> None: ...
    def sub_command(
        self,
        name: str = ...,
        description: str = ...,
        options: list = ...,
        connectors: dict = ...,
        **kwargs,
    ):  # -> (func: Unknown) -> SubCommand:
        """
        A decorator that creates a subcommand in the
        subcommand group.

        Parameters are the same as in :class:`CommandParent.sub_command`
        """
        ...

class CommandParent(BaseSlashCommand):
    def __init__(
        self,
        func,
        *,
        name=...,
        description=...,
        options=...,
        default_permission=...,
        guild_ids=...,
        connectors=...,
        auto_sync=...,
        **kwargs,
    ) -> None: ...
    def sub_command(
        self,
        name: str = ...,
        description: str = ...,
        options: list = ...,
        connectors: dict = ...,
        **kwargs,
    ):  # -> (func: Unknown) -> SubCommand:
        """
        A decorator that creates a subcommand under the base command.

        Parameters
        ----------
        name : :class:`str`
            the name of the subcommand. Defaults to the function name
        description : :class:`str`
            the description of the subcommand
        options : :class:`list`
            the options of the subcommand for registration in API
        connectors : :class:`dict`
            which function param states for each option. If the name
            of an option already matches the corresponding function param,
            you don't have to specify the connectors. Connectors template:
            ``{"option-name": "param_name", ...}``
        """
        ...
    def sub_command_group(self, name=..., **kwargs):  # -> (func: Unknown) -> SubCommandGroup:
        """
        A decorator that creates a subcommand group under the base command.
        Remember that the group must have at least one subcommand.

        Parameters
        ----------
        name : :class:`str`
            the name of the subcommand group. Defaults to the function name
        """
        ...
    async def invoke_children(self, interaction): ...
    async def invoke(self, interaction): ...

def slash_command(*args, **kwargs):  # -> (func: Unknown) -> CommandParent:
    """
    A decorator that allows to build a slash command.

    Parameters
    ----------
    auto_sync : :class:`bool`
        whether to automatically register the command or not. Defaults to ``True``
    name : :class:`str`
        name of the slash command you want to respond to (equals to function name by default).
    description : :class:`str`
        the description of the slash command. It will be visible in Discord.
    options : :class:`List[Option]`
        the list of slash command options. The options will be visible in Discord.
    default_permission : :class:`bool`
        whether the command is enabled by default when the app is added to a guild.
    guild_ids : :class:`List[int]`
        if specified, the client will register a command in these guilds.
        Otherwise this command will be registered globally.
    connectors : :class:`dict`
        which function param states for each option. If the name
        of an option already matches the corresponding function param,
        you don't have to specify the connectors. Connectors template:
        ``{"option-name": "param_name", ...}``
    """
    ...

def command(*args, **kwargs): ...
