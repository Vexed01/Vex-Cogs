"""
This type stub file was generated by pyright.
"""

from .errors import *

__all__ = (
    "BucketType",
    "SubCommand",
    "SubCommandGroup",
    "CommandParent",
    "command",
    "check",
    "check_any",
    "has_role",
    "has_any_role",
    "bot_has_role",
    "bot_has_any_role",
    "has_permissions",
    "bot_has_permissions",
    "has_guild_permissions",
    "bot_has_guild_permissions",
    "dm_only",
    "guild_only",
    "is_owner",
    "is_nsfw",
    "cooldown",
)

def class_name(func): ...
def get_class(func): ...

class BaseSlashCommand:
    def __init__(self, func, *, name=..., connectors=..., **kwargs) -> None: ...
    async def __call__(self, *args, **kwargs): ...
    def error(self, func):
        """
        A decorator that makes the function below
        work as error handler for this command.
        """
        ...
    def is_on_cooldown(self, inter):  # -> bool:
        """
        Checks whether the slash command is currently on cooldown.

        Parameters
        -----------
        inter: :class:`SlashInteraction`
            The interaction to use when checking the commands cooldown status.

        Returns
        --------
        :class:`bool`
            A boolean indicating if the slash command is on cooldown.
        """
        ...
    def reset_cooldown(self, inter):  # -> None:
        """
        Resets the cooldown on this slash command.

        Parameters
        -----------
        inter: :class:`SlashInteraction`
            The interaction to reset the cooldown under.
        """
        ...
    def get_cooldown_retry_after(self, inter):  # -> float:
        """
        Retrieves the amount of seconds before this slash command can be tried again.

        Parameters
        -----------
        inter: :class:`SlashInteraction`
            The interaction to retrieve the cooldown from.

        Returns
        --------
        :class:`float`
            The amount of time left on this slash command's cooldown in seconds.
            If this is ``0.0`` then the slash command isn't on cooldown.
        """
        ...

class SubCommand(BaseSlashCommand):
    def __init__(
        self, func, *, name=..., description=..., options=..., connectors=..., **kwargs
    ) -> None: ...

class SubCommandGroup(BaseSlashCommand):
    def __init__(self, func, *, name=..., **kwargs) -> None: ...
    def sub_command(
        self,
        name: str = ...,
        description: str = ...,
        options: list = ...,
        connectors: dict = ...,
        **kwargs,
    ):  # -> (func: Unknown) -> SubCommand:
        """
        A decorator that creates a subcommand in the
        subcommand group.

        Parameters are the same as in :class:`CommandParent.sub_command`
        """
        ...

class CommandParent(BaseSlashCommand):
    def __init__(
        self,
        func,
        *,
        name=...,
        description=...,
        options=...,
        default_permission=...,
        guild_ids=...,
        connectors=...,
        auto_sync=...,
        **kwargs,
    ) -> None: ...
    def sub_command(
        self,
        name: str = ...,
        description: str = ...,
        options: list = ...,
        connectors: dict = ...,
        **kwargs,
    ):  # -> (func: Unknown) -> SubCommand:
        """
        A decorator that creates a subcommand under the base command.

        Parameters
        ----------
        name : :class:`str`
            the name of the subcommand. Defaults to the function name
        description : :class:`str`
            the description of the subcommand
        options : :class:`list`
            the options of the subcommand for registration in API
        connectors : :class:`dict`
            which function param states for each option. If the name
            of an option already matches the corresponding function param,
            you don't have to specify the connectors. Connectors template:
            ``{"option-name": "param_name", ...}``
        """
        ...
    def sub_command_group(self, name=..., **kwargs):  # -> (func: Unknown) -> SubCommandGroup:
        """
        A decorator that creates a subcommand group under the base command.
        Remember that the group must have at least one subcommand.

        Parameters
        ----------
        name : :class:`str`
            the name of the subcommand group. Defaults to the function name
        """
        ...
    async def invoke_children(self, interaction): ...
    async def invoke(self, interaction): ...

def command(*args, **kwargs):  # -> (func: Unknown) -> CommandParent:
    """
    A decorator that allows to build a slash command.

    Parameters
    ----------
    auto_sync : :class:`bool`
        whether to automatically register the command or not. Defaults to ``True``
    name : :class:`str`
        name of the slash command you want to respond to (equals to function name by default).
    description : :class:`str`
        the description of the slash command. It will be visible in Discord.
    options : :class:`List[Option]`
        the list of slash command options. The options will be visible in Discord.
    default_permission : :class:`bool`
        whether the command is enabled by default when the app is added to a guild.
    guild_ids : :class:`List[int]`
        if specified, the client will register a command in these guilds.
        Otherwise this command will be registered globally.
    connectors : :class:`dict`
        which function param states for each option. If the name
        of an option already matches the corresponding function param,
        you don't have to specify the connectors. Connectors template:
        ``{"option-name": "param_name", ...}``
    """
    ...

def check(predicate):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """
    A function that converts ``predicate(interaction)`` functions
    into slash-command decorators

    Example

    ::

        def is_guild_owner():
            def predicate(inter):
                return inter.author.id == inter.guild.owner_id
            return check(predicate)

        @is_guild_owner()
        @slash.command(description="Says Hello if you own the guild")
        async def hello(inter):
            await inter.reply("Hello, Mr.Owner!")

    .. note::

        | In this example registration of slash-command is automatic.
        | See :ref:`slash-command_constructor` to learn more about manual registration

    """
    ...

def check_any(*checks):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.check_any``"""
    ...

def has_role(item):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.has_role``"""
    ...

def has_any_role(*items):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.has_any_role``"""
    ...

def bot_has_role(item):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.bot_has_role``"""
    ...

def bot_has_any_role(*items):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.bot_has_any_role``"""
    ...

def has_permissions(**perms):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.has_permissions``"""
    ...

def bot_has_permissions(**perms):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.bot_has_permissions``"""
    ...

def has_guild_permissions(**perms):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.has_guild_permissions``"""
    ...

def bot_has_guild_permissions(**perms):  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.bot_has_guild_permissions``"""
    ...

def dm_only():  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.dm_only``"""
    ...

def guild_only():  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.guild_only``"""
    ...

def is_owner():  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.is_owner``"""
    ...

def is_nsfw():  # -> (func: Unknown) -> (CommandParent | Unknown):
    """Similar to ``commands.is_nsfw``"""
    ...

def cooldown(rate, per, type=...):  # -> (func: Unknown) -> (BaseSlashCommand | Unknown):
    """
    A decorator that adds a cooldown to a slash-command. Similar to **discord.py** cooldown decorator.

    A cooldown allows a command to only be used a specific amount
    of times in a specific time frame. These cooldowns can be based
    either on a per-guild, per-channel, per-user, per-role or global basis.
    Denoted by the third argument of ``type`` which must be of enum
    type ``BucketType``.

    If a cooldown is triggered, then ``CommandOnCooldown`` is triggered in
    ``on_slash_command_error`` in the local error handler.

    A command can only have a single cooldown.

    Parameters
    ----------
    rate : int
        The number of times a command can be used before triggering a cooldown.
    per : float
        The amount of seconds to wait for a cooldown when it's been triggered.
    type : BucketType
        The type of cooldown to have.
    """
    ...
