"""
This type stub file was generated by pyright.
"""

import discord

__all__ = ("ClickListener", "ClickManager")
PER_MESSAGE_LISTENERS = ...

class ClickListener:
    """
    Creates a nice click manager for a message. You can use this class,
    or call :class:`discord.Message.create_click_listener(timeout)`
    in order to create an instance.

    Click manager allows to process button clicks under a specific message
    using decorator-based interface.

    Parameters
    ----------
    message_id : :class:`int`
        the ID of the message with buttons
    timeout : :class:`float`
        the amount of seconds required after the last matched interaction
        for the click manager to finish working.
        Defaults to ``None``, which means no timeout.
    """

    __slots__ = ...
    def __init__(self, message_id: int, timeout: float = ...) -> None: ...
    def kill(self):  # -> None:
        """
        Kills the click manager. Only useful if the ``timeout``
        param was specified as ``None``.
        """
        ...
    def timeout(self, func):  # -> None:
        """
        A decorator that makes the function below waiting for click listener timeout.
        """
        ...
    def matching_condition(
        self, check, *, cancel_others: bool = ..., reset_timeout: bool = ...
    ):  # -> (func: Unknown) -> Unknown:
        """
        A decorator that makes the function below waiting for a click
        matching the specified conditions.

        Parameters
        ----------
        check : :class:`function`
            the required condition. This function must take exactly one argument
            which is guaranteed to be an instance of :class:`MessageInteraction`.
            This function must return ``True`` or ``False``.
        cancel_others : :class:`bool`
            defaults to ``False``. Specifies
            whether to cancel all other local listeners or not.
            For example, if this parameter is ``False``, the library will
            activate all other listeners matching the interaction,
            untill all listeners are toggled or some of them cancels others.
        reset_timeout : :class:`bool`
            defaults to ``True``. Specifies whether to restart the timer or not.
            By restarting the timer, you extend the lifespan of all local listeners.
        """
        ...
    def from_user(
        self, user: discord.User, *, cancel_others: bool = ..., reset_timeout: bool = ...
    ):  # -> (func: Unknown) -> Unknown:
        """
        A decorator that makes the function below waiting for a click
        from the specified user.

        Parameters are the same as in :meth:`matching_condition`, except
        ``check`` parameter is replaced with a ``user`` to compare with.
        """
        ...
    def not_from_user(
        self, user: discord.User, *, cancel_others: bool = ..., reset_timeout: bool = ...
    ):  # -> (func: Unknown) -> Unknown:
        """
        A decorator that makes the function below waiting for a click
        from a user not maching the specified one.

        Parameters are the same as in :meth:`matching_condition`, except
        ``check`` parameter is replaced with a ``user`` to compare with.
        """
        ...
    def no_checks(
        self, *, cancel_others: bool = ..., reset_timeout: bool = ...
    ):  # -> (func: Unknown) -> Unknown:
        """
        A decorator that makes the function below waiting for any click.

        Parameters are the same as in :meth:`matching_condition`, except
        there's no ``check``.
        """
        ...
    def matching_id(
        self, custom_id: str, *, cancel_others: bool = ..., reset_timeout: bool = ...
    ):  # -> (func: Unknown) -> Unknown:
        """
        A decorator that makes the function below waiting for a click
        of the button matching the specified custom_id.

        Parameters are the same as in :meth:`matching_condition`, except
        ``check`` parameter is replaced with ``custom_id``.
        """
        ...

ClickManager = ClickListener
