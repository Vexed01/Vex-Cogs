"""
This type stub file was generated by pyright.
"""

from typing import List, Optional, Sequence, Union, overload

from discord import (
    AllowedMentions,
    Attachment,
    Embed,
    File,
    GuildSticker,
    Message,
    MessageReference,
    PartialMessage,
    StickerItem,
)
from discord.ui import View

__all__ = ("send", "edit")

@overload
async def send(
    self,
    content: Optional[str] = ...,
    *,
    tts: bool = ...,
    embed: Embed = ...,
    file: File = ...,
    stickers: Sequence[Union[GuildSticker, StickerItem]] = ...,
    delete_after: float = ...,
    nonce: Union[str, int] = ...,
    allowed_mentions: AllowedMentions = ...,
    reference: Union[Message, MessageReference, PartialMessage] = ...,
    mention_author: bool = ...,
    view: View = ...,
    components: list = ...,
) -> Message: ...
@overload
async def send(
    self,
    content: Optional[str] = ...,
    *,
    tts: bool = ...,
    embed: Embed = ...,
    files: List[File] = ...,
    stickers: Sequence[Union[GuildSticker, StickerItem]] = ...,
    delete_after: float = ...,
    nonce: Union[str, int] = ...,
    allowed_mentions: AllowedMentions = ...,
    reference: Union[Message, MessageReference, PartialMessage] = ...,
    mention_author: bool = ...,
    view: View = ...,
    components: list = ...,
) -> Message: ...
@overload
async def send(
    self,
    content: Optional[str] = ...,
    *,
    tts: bool = ...,
    embeds: List[Embed] = ...,
    file: File = ...,
    stickers: Sequence[Union[GuildSticker, StickerItem]] = ...,
    delete_after: float = ...,
    nonce: Union[str, int] = ...,
    allowed_mentions: AllowedMentions = ...,
    reference: Union[Message, MessageReference, PartialMessage] = ...,
    mention_author: bool = ...,
    view: View = ...,
    components: list = ...,
) -> Message: ...
@overload
async def send(
    self,
    content: Optional[str] = ...,
    *,
    tts: bool = ...,
    embeds: List[Embed] = ...,
    files: List[File] = ...,
    stickers: Sequence[Union[GuildSticker, StickerItem]] = ...,
    delete_after: float = ...,
    nonce: Union[str, int] = ...,
    allowed_mentions: AllowedMentions = ...,
    reference: Union[Message, MessageReference, PartialMessage] = ...,
    mention_author: bool = ...,
    view: View = ...,
    components: list = ...,
) -> Message: ...
async def send(
    self,
    content=...,
    *,
    tts=...,
    embed=...,
    embeds=...,
    file=...,
    files=...,
    stickers=...,
    delete_after=...,
    nonce=...,
    allowed_mentions=...,
    reference=...,
    mention_author=...,
    view=...,
    components=...,
):
    """|coro|

    Sends a message to the destination with the content given.

    The content must be a type that can convert to a string through ``str(content)``.
    If the content is set to ``None`` (the default), then the ``embed`` parameter must
    be provided.

    To upload a single file, the ``file`` parameter should be used with a
    single :class:`~discord.File` object. To upload multiple files, the ``files``
    parameter should be used with a :class:`list` of :class:`~discord.File` objects.
    **Specifying both parameters will lead to an exception**.

    To upload a single embed, the ``embed`` parameter should be used with a
    single :class:`~discord.Embed` object. To upload multiple embeds, the ``embeds``
    parameter should be used with a :class:`list` of :class:`~discord.Embed` objects.
    **Specifying both parameters will lead to an exception**.

    Parameters
    ------------
    content: Optional[:class:`str`]
        The content of the message to send.
    tts: :class:`bool`
        Indicates if the message should be sent using text-to-speech.
    embed: :class:`~discord.Embed`
        The rich embed for the content.
    file: :class:`~discord.File`
        The file to upload.
    files: List[:class:`~discord.File`]
        A list of files to upload. Must be a maximum of 10.
    nonce: :class:`int`
        The nonce to use for sending this message. If the message was successfully sent,
        then the message will have a nonce with this value.
    delete_after: :class:`float`
        If provided, the number of seconds to wait in the background
        before deleting the message we just sent. If the deletion fails,
        then it is silently ignored.
    allowed_mentions: :class:`~discord.AllowedMentions`
        Controls the mentions being processed in this message. If this is
        passed, then the object is merged with :attr:`~discord.Client.allowed_mentions`.
        The merging behaviour only overrides attributes that have been explicitly passed
        to the object, otherwise it uses the attributes set in :attr:`~discord.Client.allowed_mentions`.
        If no object is passed at all then the defaults given by :attr:`~discord.Client.allowed_mentions`
        are used instead.

        .. versionadded:: 1.4

    reference: Union[:class:`~discord.Message`, :class:`~discord.MessageReference`, :class:`~discord.PartialMessage`]
        A reference to the :class:`~discord.Message` to which you are replying, this can be created using
        :meth:`~discord.Message.to_reference` or passed directly as a :class:`~discord.Message`. You can control
        whether this mentions the author of the referenced message using the :attr:`~discord.AllowedMentions.replied_user`
        attribute of ``allowed_mentions`` or by setting ``mention_author``.

        .. versionadded:: 1.6

    mention_author: Optional[:class:`bool`]
        If set, overrides the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions``.

        .. versionadded:: 1.6
    view: :class:`discord.ui.View`
        A Discord UI View to add to the message.
    embeds: List[:class:`~discord.Embed`]
        A list of embeds to upload. Must be a maximum of 10.

        .. versionadded:: 2.0
    stickers: Sequence[Union[:class:`~discord.GuildSticker`, :class:`~discord.StickerItem`]]
        A list of stickers to upload. Must be a maximum of 3.

        .. versionadded:: 2.0

    Raises
    --------
    ~discord.HTTPException
        Sending the message failed.
    ~discord.Forbidden
        You do not have the proper permissions to send the message.
    ~discord.InvalidArgument
        The ``files`` list is not of the appropriate size,
        you specified both ``file`` and ``files``,
        or you specified both ``embed`` and ``embeds``,
        or the ``reference`` object is not a :class:`~discord.Message`,
        :class:`~discord.MessageReference` or :class:`~discord.PartialMessage`.

    Returns
    ---------
    :class:`~discord.Message`
        The message that was sent.
    """
    ...

@overload
async def edit(
    self,
    *,
    content: Optional[str] = ...,
    embed: Optional[Embed] = ...,
    attachments: List[Attachment] = ...,
    suppress: bool = ...,
    delete_after: Optional[float] = ...,
    allowed_mentions: Optional[AllowedMentions] = ...,
    view: Optional[View] = ...,
    components: Optional[list] = ...,
) -> None: ...
@overload
async def edit(
    self,
    *,
    content: Optional[str] = ...,
    embeds: List[Embed] = ...,
    attachments: List[Attachment] = ...,
    suppress: bool = ...,
    delete_after: Optional[float] = ...,
    allowed_mentions: Optional[AllowedMentions] = ...,
    view: Optional[View] = ...,
    components: Optional[list] = ...,
) -> None: ...
async def edit(
    self,
    content: Optional[str] = ...,
    embed: Optional[Embed] = ...,
    embeds: List[Embed] = ...,
    attachments: List[Attachment] = ...,
    suppress: bool = ...,
    delete_after: Optional[float] = ...,
    allowed_mentions: Optional[AllowedMentions] = ...,
    view: Optional[View] = ...,
    components: Optional[list] = ...,
) -> None:
    """|coro|

    Edits the message.

    The content must be able to be transformed into a string via ``str(content)``.

    .. versionchanged:: 1.3
        The ``suppress`` keyword-only parameter was added.

    Parameters
    -----------
    content: Optional[:class:`str`]
        The new content to replace the message with.
        Could be ``None`` to remove the content.
    embed: Optional[:class:`Embed`]
        The new embed to replace the original with.
        Could be ``None`` to remove the embed.
    embeds: List[:class:`Embed`]
        The new embeds to replace the original with. Must be a maximum of 10.
        To remove all embeds ``[]`` should be passed.

        .. versionadded:: 2.0
    attachments: List[:class:`Attachment`]
        A list of attachments to keep in the message. If ``[]`` is passed
        then all attachments are removed.
    suppress: :class:`bool`
        Whether to suppress embeds for the message. This removes
        all the embeds if set to ``True``. If set to ``False``
        this brings the embeds back if they were suppressed.
        Using this parameter requires :attr:`~.Permissions.manage_messages`.
    delete_after: Optional[:class:`float`]
        If provided, the number of seconds to wait in the background
        before deleting the message we just edited. If the deletion fails,
        then it is silently ignored.
    allowed_mentions: Optional[:class:`~discord.AllowedMentions`]
        Controls the mentions being processed in this message. If this is
        passed, then the object is merged with :attr:`~discord.Client.allowed_mentions`.
        The merging behaviour only overrides attributes that have been explicitly passed
        to the object, otherwise it uses the attributes set in :attr:`~discord.Client.allowed_mentions`.
        If no object is passed at all then the defaults given by :attr:`~discord.Client.allowed_mentions`
        are used instead.

        .. versionadded:: 1.4
    view: Optional[:class:`~discord.ui.View`]
        The updated view to update this message with. If ``None`` is passed then
        the view is removed.

    Raises
    -------
    HTTPException
        Editing the message failed.
    Forbidden
        Tried to suppress a message without permissions or
        edited a message's content or embed that isn't yours.
    ~discord.InvalidArgument
        You specified both ``embed`` and ``embeds``
    """
    ...
