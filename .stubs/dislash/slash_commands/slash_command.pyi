"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Union

import discord

__all__ = (
    "Type",
    "OptionChoice",
    "Option",
    "SlashCommand",
    "SlashCommandPermissions",
    "RawCommandPermission",
)

class Type:
    """
    Attributes
    ----------
    SUB_COMMAND = 1
    SUB_COMMAND_GROUP = 2
    STRING = 3
    INTEGER = 4
    BOOLEAN = 5
    USER = 6
    CHANNEL = 7
    ROLE = 8
    MENTIONABLE = 9
    NUMBER = 10
    """

    SUB_COMMAND = ...
    SUB_COMMAND_GROUP = ...
    STRING = ...
    INTEGER = ...
    BOOLEAN = ...
    USER = ...
    CHANNEL = ...
    ROLE = ...
    MENTIONABLE = ...
    NUMBER = ...

class OptionChoice:
    """
    Parameters
    ----------
    name : str
        the name of the option-choice (visible to users)
    value : str or int
        the value of the option-choice
    """

    def __init__(self, name: str, value: Any) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other) -> bool: ...

class Option:
    """
    Parameters
    ----------
    name : :class:`str`
        option's name
    description : :class:`str`
        option's description
    type : :class:`Type`
        the option type, e.g. ``Type.USER``, see :ref:`option_type`
    required : :class:`bool`
        whether this option is required or not
    choices : List[:class:`OptionChoice`]
        the list of option choices, type :ref:`option_choice`
    options : List[:class:`Option`]
        the list of sub options. You can only specify this parameter if
        the ``type`` is :class:`Type.SUB_COMMAND` or :class:`Type.SUB_COMMAND_GROUP`
    """

    __slots__ = ...
    def __init__(
        self,
        name: str,
        description: str = ...,
        type: int = ...,
        required: bool = ...,
        choices: List[OptionChoice] = ...,
        options: list = ...,
    ) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other) -> bool: ...
    @classmethod
    def from_dict(cls, payload: dict): ...
    def add_choice(self, name: str, value: Any):  # -> None:
        """
        Adds an OptionChoice to the list of current choices

        Parameters are the same as for :class:`OptionChoice`
        """
        ...
    def add_option(
        self,
        name: str,
        description: str = ...,
        type: int = ...,
        required: bool = ...,
        choices: List[OptionChoice] = ...,
        options: list = ...,
    ):  # -> None:
        """
        Adds an option to the current list of options

        Parameters are the same as for :class:`Option`
        """
        ...
    def to_dict(self): ...

class SlashCommand:
    """
    A base class for building slash-commands.

    Parameters
    ----------
    name : :class:`str`
        The command name
    description : :class:`str`
        The command description (it'll be displayed by discord)
    options : List[Option]
        The options of the command. See :ref:`option`
    default_permission : :class:`bool`
        Whether the command is enabled by default when the app is added to a guild
    """

    def __init__(
        self,
        name: str,
        description: str,
        options: list = ...,
        default_permission: bool = ...,
        **kwargs,
    ) -> None: ...
    def __repr__(self): ...
    def __eq__(self, other) -> bool: ...
    @classmethod
    def from_dict(cls, payload: dict): ...
    def add_option(
        self,
        name: str,
        description: str = ...,
        type: int = ...,
        required: bool = ...,
        choices: List[OptionChoice] = ...,
        options: list = ...,
    ):  # -> None:
        """
        Adds an option to the current list of options

        Parameters are the same as for :class:`Option`
        """
        ...
    def to_dict(self, *, hide_name=...): ...

class SlashCommandPermissions:
    """
    Represents slash command permissions.
    Roughly equivalent to a list of :class:`RawCommandPermission`

    Slash command permissions are checked on the server side.
    Only local slash commands can have this type of permissions.

    Obtainable via :class:`SlashCommand.permissions`

    Parameters
    ----------
    raw_permissions : List[RawCommandPermission]
        a list of :class:`RawCommandPermission`.
        However, :meth:`from_pairs` or :meth:`from_ids`
        might be more convenient.
    """

    def __init__(self, raw_permissions: list = ...) -> None: ...
    def __repr__(self): ...
    @classmethod
    def from_pairs(cls, permissions: dict):  # -> SlashCommandPermissions:
        """
        Creates :class:`SlashCommandPermissions` using
        instances of :class:`discord.Role` and :class:`discord.User`

        Parameters
        ----------
        permissions : :class:`dict`
            a dictionary of {:class:`Role | User`: :class:`bool`}
        """
        ...
    @classmethod
    def from_ids(
        cls, role_perms: dict = ..., user_perms: dict = ...
    ):  # -> SlashCommandPermissions:
        """
        Creates :class:`SlashCommandPermissions` from
        2 dictionaries of IDs and permissions.

        Parameters
        ----------
        role_perms : :class:`dict`
            a dictionary of {``role_id``: :class:`bool`}
        user_perms : :class:`dict`
            a dictionary of {``user_id``: :class:`bool`}
        """
        ...
    @classmethod
    def from_dict(cls, data: dict): ...
    def to_dict(self): ...

class RawCommandPermission:
    """
    Represents command permissions for a role or a user.

    Attributes
    ----------
    id : :class:`int`
        ID of a target
    type : :class:`int`
        1 if target is a role; 2 if target is a user
    permission : :class:`bool`
        allow or deny the access to the command
    """

    __slots__ = ...
    def __init__(self, id: int, type: int, permission: bool) -> None: ...
    def __repr__(self): ...
    @classmethod
    def from_pair(cls, target: Union[discord.Role, discord.User], permission: bool): ...
    @classmethod
    def from_dict(cls, data: dict): ...
    def to_dict(self): ...
