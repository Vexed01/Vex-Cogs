"""
This type stub file was generated by pyright.
"""

__all__ = ("InteractionType", "ResponseType", "BaseInteraction")
import discord

from . import SlashInteractionData

class InteractionType:
    Ping = ...
    ApplicationCommand = ...
    MessageComponent = ...

class ResponseType:
    """
    All possible response type values. Used in :class:`Interaction.reply`

    Attributes
    ----------
    Pong = 1
        ACK a Ping
    ChannelMessageWithSource = 4
        Respond to an interaction with a message
    AcknowledgeWithSource = 5
        ACK an interaction and edit a response later, the user sees a loading state
    DeferredUpdateMessage = 6
        For components, ACK an interaction and edit the original message later;
        the user does not see a loading state
    UpdateMessage = 7
        For components, edit the message the component was attached to
    """

    Pong = ...
    Acknowledge = ...
    ChannelMessage = ...
    ChannelMessageWithSource = ...
    AcknowledgeWithSource = ...
    DeferredUpdateMessage = ...
    UpdateMessage = ...

class BaseInteraction:
    """
    The base class for all interactions
    """

    def __init__(self, client, data: dict) -> None: ...
    @property
    def created_at(self): ...
    @property
    def expired(self): ...
    @property
    def client(self): ...
    @property
    def me(self): ...
    @property
    def author(self) -> discord.User | discord.Member: ...
    @property
    def channel(self) -> discord.TextChannel | None: ...
    @property
    def data(self) -> SlashInteractionData: ...
    async def reply(
        self,
        content=...,
        *,
        embed=...,
        embeds=...,
        components=...,
        view=...,
        file=...,
        files=...,
        tts=...,
        hide_user_input=...,
        ephemeral=...,
        delete_after=...,
        allowed_mentions=...,
        type=...,
        fetch_response_message=...,
    ):
        """
        Creates an interaction response. What's the difference between this method and
        :meth:`create_response`? If the token is no longer valid, this method sends a usual
        channel message instead of creating an interaction response. Also, this method
        fetches the interaction response message and returns it, unlike :meth:`create_response`.

        Parameters
        ----------
        content : :class:`str`
            message content
        embed : :class:`discord.Embed`
            message embed
        embeds : :class:`List[discord.Embed]`
            a list of up to 10 embeds to attach
        components : :class:`List[ActionRow]`
            a list of up to 5 action rows
        view : :class:`discord.ui.View`
            only usable with discord.py 2.0. Read more about ``View`` in
            discord.py 2.0 official documentation
        file : :class:`discord.File`
            if it's the first interaction reply, the file will be ignored due to API limitations.
            Everything else is the same as in :class:`discord.TextChannel.send()` method.
        files : List[:class:`discord.File`]
            same as ``file`` but for multiple files.
        hide_user_input : :class:`bool`
            if set to ``True``, user's input won't be displayed
        ephemeral : :class:`bool`
            if set to ``True``, your response will only be visible to the command author
        tts : :class:`bool`
            whether the message is text-to-speech or not
        delete_after : :class:`float`
            if specified, your reply will be deleted after ``delete_after`` seconds
        allowed_mentions : :class:`discord.AllowedMentions`
            controls the mentions being processed in this message.
        type : :class:`int` | :class:`ResponseType`
            sets the response type. If it's not specified, this method sets
            it according to ``hide_user_input``, ``content`` and ``embed`` params.
        fetch_response_message : :class:`bool`
            whether to fetch and return the response message. Defaults to ``True``.

        Raises
        ------
        ~discord.HTTPException
            sending the response failed
        ~discord.InvalidArgument
            Both ``embed`` and ``embeds`` are specified

        Returns
        -------
        message : :class:`discord.Message` | ``None``
            The response message that has been sent or ``None`` if the message is ephemeral
        """
        ...
    async def create_response(
        self,
        content=...,
        *,
        type=...,
        embed=...,
        embeds=...,
        components=...,
        view=...,
        ephemeral=...,
        tts=...,
        allowed_mentions=...,
    ):
        """
        Creates an interaction response.

        Parameters
        ----------
        content : :class:`str`
            response content
        type : :class:`int` | :class:`ResponseType`
            sets the response type. See :class:`ResponseType`
        embed : :class:`discord.Embed`
            response embed
        embeds : :class:`List[discord.Embed]`
            a list of up to 10 embeds to attach
        components : :class:`List[ActionRow]`
            a list of up to 5 action rows
        view : :class:`discord.ui.View`
            only usable with discord.py 2.0. Read more about ``View`` in
            discord.py 2.0 official documentation
        ephemeral : :class:`bool`
            if set to ``True``, your response will only be visible to the command author
        tts : :class:`bool`
            whether the message is text-to-speech or not
        allowed_mentions : :class:`discord.AllowedMentions`
            controls the mentions being processed in this message.

        Raises
        ------
        ~discord.HTTPException
            sending the response failed
        ~discord.InvalidArgument
            Both ``embed`` and ``embeds`` are specified
        """
        ...
    async def edit(
        self, content=..., *, embed=..., embeds=..., components=..., allowed_mentions=...
    ):
        """
        Edits the original interaction response.

        Parameters
        ----------
        content : :class:`str`
            New message content
        embed : :class:`discord.Embed`
            New message embed
        embeds : :class:`List[discord.Embed]`
            a list of up to 10 embeds of a new message
        components : :class:`List[ActionRow]`
            a list of up to 5 action rows
        allowed_mentions : :class:`discord.AllowedMentions`
            controls the mentions being processed in this message.

        Returns
        -------
        message : :class:`discord.Message`
            The message that was edited
        """
        ...
    async def delete(self):  # -> None:
        """
        Deletes the original interaction response.
        """
        ...
    async def delete_after(self, delay: float): ...
    async def fetch_initial_response(self):
        """
        Fetches the original interaction response.
        """
        ...
    async def followup(
        self,
        content=...,
        *,
        embed=...,
        embeds=...,
        file=...,
        files=...,
        components=...,
        view=...,
        tts=...,
        ephemeral=...,
        allowed_mentions=...,
        username=...,
        avatar_url=...,
    ):
        """
        Sends a followup message.

        Parameters
        ----------
        content : :class:`str`
            the followup message content
        embed : :class:`discord.Embed`
            the followup message embed
        embeds : :class:`List[discord.Embed]`
            a list of up to 10 embeds to attach
        file : :class:`discord.File`
            a file to attach to the message
        files : List[:class:`discord.File`]
            a list of files to attach to the message
        components : :class:`List[ActionRow]`
            a list of up to 5 action rows
        view : :class:`discord.ui.View`
            only usable with discord.py 2.0. Read more about ``View`` in
            discord.py 2.0 official documentation
        ephemeral : :class:`bool`
            if set to ``True``, your message will only be visible to the command author
        tts : :class:`bool`
            whether the message is text-to-speech or not
        allowed_mentions : :class:`discord.AllowedMentions`
            controls the mentions being processed in this message
        username : :class:`str`
            override the default bot name
        avatar_url : :class:`str`
            override the default avatar of the bot
        """
        ...
    send = ...
    respond = ...
