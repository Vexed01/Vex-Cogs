"""
This type stub file was generated by pyright.
"""

import discord

__all__ = (
    "auto_rows",
    "ComponentType",
    "ButtonStyle",
    "Component",
    "Button",
    "ActionRow",
    "SelectOption",
    "MenuOption",
    "SelectMenu",
    "_component_factory",
)
ID_SOURCE = ...
MAX_ID = ...

def auto_rows(*buttons, max_in_row: int = ...):  # -> list[ActionRow]:
    """
    Distributes buttons across multiple rows
    and returns the list of rows.
    Example
    -------
    ::

        rows = auto_rows(
            Button(label="Red", custom_id="red", style=4),
            Button(label="Green", custom_id="green", style=3),
            max_in_row=1
        )
        await ctx.send("Buttons", components=rows)

    Parameters
    ----------
    buttons : List[:class:`Button`]
        a list of buttons to distribute
    max_in_row : :class:`int`
        limit of buttons in a single row. Must be between 1 and 5.

    Returns
    -------
    List[:class:`ActionRow`]
        the list of rows with buttons
    """
    ...

class ComponentType:
    """
    An enumerator for component types.

    Attributes
    ----------
    ActionRow = 1
    Button = 2
    SelectMenu = 3
    """

    ActionRow = ...
    Button = ...
    SelectMenu = ...

class ButtonStyle:
    """
    Attributes
    ----------
    blurple = 1
    grey    = 2
    green   = 3
    red     = 4
    link    = 5
    """

    primary = ...
    blurple = ...
    secondary = ...
    grey = ...
    gray = ...
    success = ...
    green = ...
    danger = ...
    red = ...
    link = ...

class SelectOption:
    """
    This class represents an option in a select menu.

    Parameters
    ----------
    label : :class:`str`
        the user-facing name of the option, max 25 characters
    value : :class:`str`
        the dev-define value of the option, max 100 characters
    description : :class:`str`
        an additional description of the option, max 50 characters
    emoji : :class:`str`
        well add an emoji to the option
    default : :class:`bool`
        will render this option as selected by default
    """

    __slots__ = ...
    def __init__(
        self, label: str, value: str, description: str = ..., emoji: str = ..., default: bool = ...
    ) -> None: ...
    def __repr__(self): ...
    @classmethod
    def from_dict(cls, data: dict): ...
    def to_dict(self): ...

class Component:
    """
    The base class for message components
    """

    def __init__(self, type: int) -> None: ...

class SelectMenu(Component):
    """
    This class represents a select menu.

    Parameters
    ----------
    custom_id : :class:`str`
        a developer-defined identifier for the button, max 100 characters
    placeholder : :class:`str`
        custom placeholder text if nothing is selected, max 100 characters
    min_values : :class:`int`
        the minimum number of items that must be chosen; default 1, min 0, max 25
    max_values : :class:`int`
        the maximum number of items that can be chosen; default 1, max 25
    options : List[:class:`SelectOption`]
        the choices in the select, max 25
    disabled : :class:`bool`
        disable the menu, defaults to false

    Attributes
    ----------
    custom_id : :class:`str`
        a developer-defined identifier for the button, max 100 characters
    placeholder : :class:`str`
        custom placeholder text if nothing is selected, max 100 characters
    min_values : :class:`int`
        the minimum number of items that must be chosen; default 1, min 0, max 25
    max_values : :class:`int`
        the maximum number of items that can be chosen; default 1, max 25
    options : List[:class:`SelectOption`]
        the choices in the select, max 25
    disabled : :class:`bool`
        disable the menu, defaults to false
    selected_options : List[:class:`SelectOption`]
        the list of chosen options, max 25
    """

    def __init__(
        self,
        *,
        custom_id: str = ...,
        placeholder: str = ...,
        min_values: int = ...,
        max_values: int = ...,
        options: list = ...,
        disabled: bool = ...,
    ) -> None: ...
    def __repr__(self): ...
    def add_option(
        self, label: str, value: str, description: str = ..., emoji: str = ..., default: bool = ...
    ):  # -> None:
        """
        Adds an option to the list of options of the menu.
        Parameters are the same as in :class:`SelectOption`.
        """
        ...
    @classmethod
    def from_dict(cls, data: dict): ...
    def to_dict(self): ...

class Button(Component):
    """
    Builds a button.

    Parameters
    ----------
    style : :class:`ButtonStyle`
        Style of the button
    label : :class:`str`
        Button text
    emoji : :class:`str` | :class:`discord.PartialEmoji`
        Button emoji
    custom_id : :class:`str`
        You should set it by yourself, it's not a snowflake.
        If button style is not :class:`ButtonStyle.link`, this is
        a required field
    url : :class:`str`
        If button style is :class:`ButtonStyle.link`, this is
        a required field.
    disabled : :class:`bool`
        Whether the button is disabled or not. Defaults to false.
    """

    def __init__(
        self,
        *,
        style: ButtonStyle,
        label: str = ...,
        emoji: discord.PartialEmoji = ...,
        custom_id: str = ...,
        url: str = ...,
        disabled: bool = ...,
    ) -> None: ...
    def __repr__(self): ...
    @property
    def id(self): ...
    @classmethod
    def from_dict(cls, data: dict): ...
    def to_dict(self): ...

class ActionRow(Component):
    """
    Represents an action row. Action rows are basically
    shelves for buttons.

    Parameters
    ----------
    components : :class:`List[Button]`
        a list of up to 5 buttons to place in a row
    """

    def __init__(self, *components) -> None: ...
    def __repr__(self): ...
    @property
    def buttons(self): ...
    @classmethod
    def from_dict(cls, data: dict): ...
    def to_dict(self): ...
    def disable_buttons(self, *positions: int):  # -> None:
        """
        Sets ``disabled`` to ``True`` for all buttons in this row.
        """
        ...
    def enable_buttons(self, *positions: int):  # -> None:
        """
        Sets ``disabled`` to ``False`` for all buttons in this row.
        """
        ...
    def add_button(
        self,
        *,
        style: ButtonStyle,
        label: str = ...,
        emoji: str = ...,
        custom_id: str = ...,
        url: str = ...,
        disabled: bool = ...,
    ): ...
    def add_menu(
        self,
        *,
        custom_id: str,
        placeholder: str = ...,
        min_values: int = ...,
        max_values: int = ...,
        options: list = ...,
    ): ...

MenuOption = SelectOption
