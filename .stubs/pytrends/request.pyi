"""
This type stub file was generated by pyright.
"""

import sys

if sys.version_info[0] == 2: ...
else: ...

class TrendReq:
    """
    Google Trends API
    """

    GET_METHOD = ...
    POST_METHOD = ...
    GENERAL_URL = ...
    INTEREST_OVER_TIME_URL = ...
    INTEREST_BY_REGION_URL = ...
    RELATED_QUERIES_URL = ...
    TRENDING_SEARCHES_URL = ...
    TOP_CHARTS_URL = ...
    SUGGESTIONS_URL = ...
    CATEGORIES_URL = ...
    TODAY_SEARCHES_URL = ...
    def __init__(
        self,
        hl=...,
        tz=...,
        geo=...,
        timeout=...,
        proxies=...,
        retries=...,
        backoff_factor=...,
        requests_args=...,
    ) -> None:
        """
        Initialize default values for params
        """
        ...
    def GetGoogleCookie(self):  # -> dict[Unknown, Unknown]:
        """
        Gets google cookie (used for each and every proxy; once on init otherwise)
        Removes proxy from the list on proxy error
        """
        ...
    def GetNewProxy(self):  # -> None:
        """
        Increment proxy INDEX; zero on overflow
        """
        ...
    def build_payload(self, kw_list, cat=..., timeframe=..., geo=..., gprop=...):  # -> None:
        """Create the payload for related queries, interest over time and interest by region"""
        ...
    def interest_over_time(self):  # -> FrameOrSeries:
        """Request data from Google's Interest Over Time section and return a dataframe"""
        ...
    def interest_by_region(
        self, resolution=..., inc_low_vol=..., inc_geo_code=...
    ):  # -> FrameOrSeries:
        """Request data from Google's Interest by Region section and return a dataframe"""
        ...
    def related_topics(self):  # -> dict[Unknown, Unknown]:
        """Request data from Google's Related Topics section and return a dictionary of dataframes

        If no top and/or rising related topics are found, the value for the key "top" and/or "rising" will be None
        """
        ...
    def related_queries(self):  # -> dict[Unknown, Unknown]:
        """Request data from Google's Related Queries section and return a dictionary of dataframes

        If no top and/or rising related queries are found, the value for the key "top" and/or "rising" will be None
        """
        ...
    def trending_searches(self, pn=...):  # -> DataFrame:
        """Request data from Google's Hot Searches section and return a dataframe"""
        ...
    def today_searches(self, pn=...):  # -> Any:
        """Request data from Google Daily Trends section and returns a dataframe"""
        ...
    def top_charts(self, date, hl=..., tz=..., geo=...):  # -> DataFrame:
        """Request data from Google's Top Charts section and return a dataframe"""
        ...
    def suggestions(self, keyword):  # -> Any:
        """Request data from Google's Keyword Suggestion dropdown and return a dictionary"""
        ...
    def categories(self):  # -> Any:
        """Request available categories data from Google's API and return a dictionary"""
        ...
    def get_historical_interest(
        self,
        keywords,
        year_start=...,
        month_start=...,
        day_start=...,
        hour_start=...,
        year_end=...,
        month_end=...,
        day_end=...,
        hour_end=...,
        cat=...,
        geo=...,
        gprop=...,
        sleep=...,
    ):
        """Gets historical hourly data for interest by chunking requests to 1 week at a time (which is what Google allows)"""
        ...
